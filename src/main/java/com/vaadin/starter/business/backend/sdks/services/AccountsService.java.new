package com.vaadin.starter.business.backend.sdks.services;

import com.catalis.core.banking.accounts.sdk.model.*;
import com.vaadin.starter.business.backend.sdks.services.rest.accounts.*;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Mono;

public interface AccountsService {

    /**
     * Create a new account.
     *
     * @param accountRequest the account to create
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<AccountDTO>> createAccount(AccountRequest accountRequest);

    /**
     * Delete an account by ID.
     *
     * @param id the ID of the account to delete
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<Void>> deleteAccount(Long id);

    /**
     * Get an account by ID.
     *
     * @param id the ID of the account to get
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<AccountDTO>> getAccount(Long id);

    /**
     * Filter accounts based on the provided request parameters.
     *
     * @param accountFilterRequest the request containing filter criteria for accounts
     * @return a reactive Mono emitting a ResponseEntity containing a PaginationResponseAccountDTO with the filtered results
     */
    Mono<ResponseEntity<PaginationResponseAccountDTO>> filterAccounts(AccountFilterRequest accountFilterRequest);

    /**
     * Update an account.
     *
     * @param id the ID of the account to update
     * @param accountRequest the account to update
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<AccountDTO>> updateAccount(Long id, AccountRequest accountRequest);

    /**
     * Create a new balance.
     *
     * @param accountId the ID of the account to create the balance for
     * @param accountBalanceRequest the balance to create
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<AccountBalanceDTO>> createBalance(Long accountId, AccountBalanceRequest accountBalanceRequest);

    /**
     * Delete a balance by ID.
     *
     * @param accountId the ID of the account
     * @param id the ID of the balance to delete
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<Void>> deleteBalance(Long accountId, Long id);

    /**
     * Get a balance by ID.
     *
     * @param accountId the ID of the account
     * @param id the ID of the balance to get
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<AccountBalanceDTO>> getBalance(Long accountId, Long id);

    /**
     * Update a balance.
     *
     * @param accountId the ID of the account
     * @param id the ID of the balance to update
     * @param accountBalanceRequest the balance to update
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<AccountBalanceDTO>> updateBalance(Long accountId, Long id, AccountBalanceRequest accountBalanceRequest);

    /**
     * Create a new account notification.
     *
     * @param accountNotificationRequest the notification to create
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<AccountNotificationDTO>> createAccountNotification(AccountNotificationRequest accountNotificationRequest);

    /**
     * Delete an account notification by ID.
     *
     * @param id the ID of the notification to delete
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<Void>> deleteAccountNotification(Long id);

    /**
     * Filter account notifications based on the provided request parameters.
     *
     * @param accountNotificationFilterRequest the request containing filter criteria for notifications
     * @return a reactive Mono emitting a ResponseEntity containing a PaginationResponseAccountDTO with the filtered results
     */
    Mono<ResponseEntity<PaginationResponseAccountDTO>> filterAccountNotifications(AccountNotificationFilterRequest accountNotificationFilterRequest);

    /**
     * Get account notifications by account ID.
     *
     * @param accountId the ID of the account
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<PaginationResponseAccountDTO>> getAccountNotificationsByAccountId(Long accountId);

    /**
     * Get account notifications by type.
     *
     * @param type the type of notifications to get
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<PaginationResponseAccountDTO>> getAccountNotificationsByType(String type);

    /**
     * Get active notifications.
     *
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<PaginationResponseAccountDTO>> getActiveNotifications();

    /**
     * Get unread account notifications.
     *
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<PaginationResponseAccountDTO>> getUnreadAccountNotifications();

    /**
     * Mark all notifications as read.
     *
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<Void>> markAllNotificationsAsRead();

    /**
     * Update an account notification.
     *
     * @param id the ID of the notification to update
     * @param accountNotificationRequest the notification to update
     * @return a Mono with the response entity
     */
    Mono<ResponseEntity<AccountNotificationDTO>> updateAccountNotification(Long id, AccountNotificationRequest accountNotificationRequest);
}